fn strcmp(char* lhs, char* rhs);
fn free(void* ptr);
fn ArrayList_drop(void* self);

struct ArrayList;
struct TreeMap;
struct StringBuilder;

pub fn main() {
    TreeMap* replacements = TreeMap__new_owned(&strcmp, &free, &ArrayList_drop);
    char* line;
    while !iseof() {
        line = read_line();
        if strlen(line) == 0 {
            # end of the replacements
            free(line);
            done;
        }
        char* idx = strchr(line, ' ') - line;
        char* src = strprefix(line, idx);
        char* tgt = strsuffix(line, idx + 4);
        # printf("line '%s' is '%s' -> '%s'\n", line, src, tgt);
        ArrayList* targets = replacements.get(src);
        if targets != null {
            free(src);
        }
        if targets == null {
            targets = ArrayList__new_owned(4, &free);
            replacements.put(src, targets);
        }
        targets.push(tgt);
        free(line);
    }
    line = read_line();
#    printf("calib mol: %s\n", line);
    int calib = calibrate(replacements, line);
    printf("Calibration Result: %d\n", calib);
    free(line);
    replacements.drop();
}

fn calibrate(TreeMap* replacements, char* init) {
    TreeMap* result = TreeMap__new_owned(&strcmp, &free, null);
    int start = 0;
    int i = 1;
    while true {
        char c = init[i];
        if c == null { done; }
        if c > 0x60 {
            # lowercase
            i = i + 1;
            again;
        }
        do_replacement(result, replacements, init, start, i);
        start = i;
        i = i + 1;
    }
    do_replacement(result, replacements, init, start, i);
    int size = result.size();
    result.drop();
    return size;
}

fn do_replacement(TreeMap* result, TreeMap* replacements, char* init, int start, int end) {
    char* mid = substr(init, start, end);
#    printf("replace '%s'\n", mid);
    ArrayList* repls = replacements.get(mid);
    if repls == null {
#        puts("  no replacements found");
        free(mid);
        return;
    }
    restitch(strprefix(init, start),
             strsuffix(init, end),
             result,
             repls);
    free(mid);
}

fn restitch(char* prefix, char* suffix, TreeMap* result, ArrayList* repls) {
#    printf("  restitch '%s' .. '%s'\n", prefix, suffix);
    int i = 0;
    int l = repls.size();
    while i < l {
        StringBuilder* sb = StringBuilder__new();
        sb.push_str(prefix);
        sb.push_str(repls.get(i));
        sb.push_str(suffix);
        char* mol = sb.into_chars();
        i = i + 1;

        if result.get(mol) != null {
#            printf("Already seen '%s'\n", mol);
            free(mol);
            again;
        }

        # it's new!
#        printf("A new one: '%s'\n", mol);
        result.put(mol, 1);
    }
    free(prefix);
    free(suffix);
}

fn strprefix(char* str, int len) {
    return substr(str, 0, len);
}

fn strsuffix(char* str, int from) {
    return strclone(str + from);
}
